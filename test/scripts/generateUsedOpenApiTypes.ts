import { join } from "path"
import { existsSync, mkdirSync, writeFileSync } from "fs";
import {isCliKeyPresent} from "../utils/utils";
import {CliKey} from "../enums/CliKey";

(async () => {
    let openApiSpec: object
    if (isCliKeyPresent(CliKey.Integration)) {
        const serverUrl = `http://${process.env.SERVER_HOST}:${process.env.SERVER_PORT}/docs/swagger.json`
        const response = await fetch(serverUrl)
        if (response.status !== 200) {
            throw new Error(`failed to get openapi spec: ${response.statusText}`)
        }
        openApiSpec = await response.json()
    } else {
        openApiSpec = await import("../../build/swagger.json")
    }
    let tsFileContent = `export default ${JSON.stringify(openApiSpec, null, 4)} as const`
    let typesFolder = join(process.cwd(), 'test', 'types', 'cornellNotepadService', 'autoGenerated')
    if (!existsSync(typesFolder)) {
        mkdirSync(typesFolder, { recursive: true })
    }
    const specFilePath = join(typesFolder, 'openapiSpec.ts')
    writeFileSync(specFilePath, tsFileContent, { encoding: 'utf8' })
})()