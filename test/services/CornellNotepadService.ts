import { NormalizeOAS, createClient } from "fets";
import mongoose from "mongoose";
import { app } from "../../src/app";
import { IDeleteNotesRequest, IDeleteNotesResponse, IDeleteUserRequest, IDeleteUserResponse, IGetNoteRequest, IGetNoteResponse, IGetNotesRequest, IGetNotesResponse, IGetUserRequest, IGetUserResponse, IPostAuthSignInRequest, IPostAuthSignInResponse, IPostAuthSignUpResponse, IPostNotesRequest, IPostNotesResponse, IPutNoteRequest, IPutNoteResponse, IPutUserInfoRequest, IPutUserInfoResponse, IPutUserPasswordRequest, IPutUserPasswordResponse } from "../types/cornellNotepadService/types";
import type openapi from "../types/cornellNotepadService/autoGenerated/openapiSpec"
import { join } from "path";
import { getValidatedResponseBody } from "../utils/validationUtils"
import Assert from "../utils/assert";

export class CornellNotepadService {
    private static server?: ReturnType<typeof app.listen>
    private static endpoint = "http://127.0.0.1:3000"
    private static client = createClient<NormalizeOAS<typeof openapi>>({
        endpoint: this.endpoint as never,
    })
    private static typesFile = join(process.cwd(), 'test', 'types', 'cornellNotepadService', 'types.d.ts')

    static async start() {
        await new Promise<void>(resolve => this.server = app.listen(3000, resolve))
    }

    static async stop() {
        await new Promise<void>((resolve, reject) => {
            if (!this.server) {
                throw new Error(`cornell notepad service was not started`)
            }
            this.server.close(err => {
                if (err) {
                    reject(err)
                } else {
                    resolve()
                }
            })
        })
        await mongoose.disconnect()
    }

    static async getNotes<ExpectedResponse = IGetNotesResponse>(
        requestParams: IGetNotesRequest,
        expectedStatus: number = 200,
        expectedResponseTypeName: string = "IGetNotesResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/notes'].get(requestParams)
        Assert.equal(response.status, expectedStatus)
        return getValidatedResponseBody(
            response as any,
            this.typesFile,
            expectedResponseTypeName
        ) as ExpectedResponse
    }

    static async postNotes<ExpectedResponse = IPostNotesResponse>(
        requestParams: IPostNotesRequest,
        expectedStatus: number = 200,
        expectedResponseTypeName: string = "IPostNotesResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/notes'].post(requestParams)
        Assert.equal(response.status, expectedStatus)
        return getValidatedResponseBody(
            response as any,
            this.typesFile,
            expectedResponseTypeName
        ) as ExpectedResponse
    }

    static async deleteNotes<ExpectedResponse = IDeleteNotesResponse>(
        requestParams: IDeleteNotesRequest,
        expectedStatus: number = 204,
        expectedResponseTypeName: string = "IDeleteNotesResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/notes'].delete(requestParams)
        Assert.equal(response.status, expectedStatus)
        if (expectedResponseTypeName !== "IDeleteNotesResponse") {
            return getValidatedResponseBody(
                response,
                this.typesFile,
                expectedResponseTypeName
            ) as ExpectedResponse
        } else {
            // @ts-expect-error
            return
        }
    }

    static async getNote<ExpectedResponse = IGetNoteResponse>(
        requestParams: IGetNoteRequest,
        expectedStatus: number = 200,
        expectedResponseTypeName: string = "IGetNoteResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/notes/{_id}'].get(requestParams)
        Assert.equal(response.status, expectedStatus)
        return getValidatedResponseBody(
            response as any,
            this.typesFile,
            expectedResponseTypeName
        ) as ExpectedResponse
    }

    static async putNote<ExpectedResponse = IPutNoteResponse>(
        requestParams: IPutNoteRequest,
        expectedStatus: number = 204,
        expectedResponseTypeName: string = "IPutNoteResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/notes/{_id}'].put(requestParams)
        Assert.equal(response.status, expectedStatus)
        if (expectedResponseTypeName !== "IPutNoteResponse") {
            return getValidatedResponseBody(
                response as any,
                this.typesFile,
                expectedResponseTypeName
            ) as ExpectedResponse
        } else {
            // @ts-expect-error
            return
        }
    }

    static async getDocs(): Promise<Response> {
        let response = await fetch(`${this.endpoint}/docs`)
        return response
    }

    static async signUp(requestParams: IPostAuthSignUpResponse) {
        let response = await this.client['/auth/sign-up'].post(requestParams)
        return response
    }

    static async signIn<ExpectedResponse = IPostAuthSignInResponse>(
        requestParams: IPostAuthSignInRequest,
        expectedStatus: number = 200,
        expectedResponseTypeName: string = "IPostAuthSignInResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/auth/sign-in'].post(requestParams)
        Assert.equal(response.status, expectedStatus)
        return getValidatedResponseBody(
            response as any,
            this.typesFile,
            expectedResponseTypeName
        ) as ExpectedResponse
    }

    static async deleteUser<ExpectedResponse = IDeleteUserResponse>(
        requestParams: IDeleteUserRequest,
        expectedStatus: number = 204,
        expectedResponseTypeName: string = "IDeleteUserResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/user'].delete(requestParams)
        Assert.equal(response.status, expectedStatus)
        if (expectedResponseTypeName !== "IDeleteUserResponse") {
            return getValidatedResponseBody(
                response,
                this.typesFile,
                expectedResponseTypeName
            ) as ExpectedResponse
        } else {
            // @ts-expect-error
            return
        }
    }

    static async getUser<ExpectedResponse = IGetUserResponse>(
        requestParams: IGetUserRequest,
        expectedStatus: number = 200,
        expectedResponseTypeName: string = "IGetUserResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/user'].get(requestParams)
        Assert.equal(response.status, expectedStatus)
        return getValidatedResponseBody(
            response as any,
            this.typesFile,
            expectedResponseTypeName
        ) as ExpectedResponse
    }

    static async putUserInfo<ExpectedResponse = IPutUserInfoResponse>(
        requestParams: IPutUserInfoRequest,
        expectedStatus: number = 204,
        expectedResponseTypeName: string = "IPutUserInfoResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/user/info'].put(requestParams)
        Assert.equal(response.status, expectedStatus)
        if (expectedResponseTypeName !== "IPutUserInfoResponse") {
            return getValidatedResponseBody(
                response,
                this.typesFile,
                expectedResponseTypeName
            ) as ExpectedResponse
        } else {
            // @ts-expect-error
            return
        }
    }

    static async putUserPassword<ExpectedResponse = IPutUserPasswordResponse>(
        requestParams: IPutUserPasswordRequest,
        expectedStatus: number = 204,
        expectedResponseTypeName: string = "IPutUserPasswordResponse"
    ): Promise<ExpectedResponse> {
        let response = await this.client['/user/password'].put(requestParams)
        Assert.equal(response.status, expectedStatus)
        if (expectedResponseTypeName !== "IPutUserPasswordResponse") {
            return getValidatedResponseBody(
                response,
                this.typesFile,
                expectedResponseTypeName
            ) as ExpectedResponse
        } else {
            // @ts-expect-error
            return
        }
    }
}